--- ../Tesla_Coil_MIDI_Synth/LCD.cpp	2024-11-09 18:53:14
+++ build/patched/LCD.cpp	2024-11-09 20:36:10
@@ -1,3 +1,4 @@
+#include "Coil.h"
 #include "LCD.h"
 #include "BarChars.h"
 #include "Synth.h"
@@ -21,7 +22,7 @@
   "B",
 };
 
-LCD::LCD(Synth &synth, MIDI &midi, Audio &audio): screens{
+LCD::LCD(Coil &coil, Synth &synth, MIDI &midi, Audio &audio): screens{
   { // SCREEN_PULSE_WIDTH
     "P Width: ",
     "%",
@@ -150,7 +151,7 @@
     NULL,
     0
   }
-}, synth(synth), midi(midi), audio(audio), lcd(19, 18, 17, 16, 23, 24), displayedValue(synth.vol) {}
+}, coil(coil), synth(synth), midi(midi), audio(audio), lcd(coil.lc), displayedValue(synth.vol) {}
 
 void LCD::init() {
   lcd.begin(16, 2);
@@ -181,10 +182,11 @@
   );
   lcd.setCursor(0, 1);
   lcd.print(__DATE__);
+  coil.lc.present();
 }
 
 void LCD::update() {
-  unsigned long ms = millis();
+  unsigned long ms = coil.millis();
   if(ms-lastLCDframe < LCD_UPDATE_PERIOD) return;
   lastLCDframe = ms;
 
@@ -219,7 +221,7 @@
         }
   
         // Draw volume bar
-        uint16_t volume = analogRead(6)*30/1023;
+        uint16_t volume = averageVolume*30;
         volumeBar[0] = volume > 0 ? BAR_LEFT_FULL : BAR_LEFT_EMPTY;
         volumeBar[15] = volume >= 30 ? BAR_RIGHT_FULL : BAR_RIGHT_EMPTY;
         for(uint8_t x=1; x<15; x++) {
@@ -305,6 +307,7 @@
   } else framesSinceLastInput = 0;
   
   LCDframe++;
+  coil.lc.present();
 }
 
 void LCD::MIDIping(int8_t c) {
