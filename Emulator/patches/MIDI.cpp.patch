4d3
< #include "LCD.h"
6d4
< #include <Arduino.h>
8c6
< #include <MIDIUSB.h>
---
> #include <string.h>
10c8
< namespace MIDI {
---
> #include "Coil.h"
12c10
< const float midi2freq[] = {8.18,8.66,9.18,9.72,10.30,10.91,11.56,12.25,12.98,13.75,14.57,15.43,16.35,17.32,18.35,19.45,20.60,21.83,23.12,24.50,25.96,27.50,29.14,30.87,32.70,34.65,36.71,38.89,41.20,43.65,46.25,49.00,51.91,55.00,58.27,61.74,65.41,69.30,73.42,77.78,82.41,87.31,92.50,98.00,103.83,110.00,116.54,123.47,130.81,138.59,146.83,155.56,164.81,174.61,185.00,196.00,207.65,220.00,233.08,246.94,261.63,277.18,293.66,311.13,329.63,349.23,369.99,392.00,415.30,440.00,466.16,493.88,523.25,554.37,587.33,622.25,659.26,698.46,739.99,783.99,830.61,880.00,932.33,987.77,1046.50,1108.73,1174.66,1244.51,1318.51,1396.91,1479.98,1567.98,1661.22,1760.00,1864.66,1975.53,2093.00,2217.46,2349.32,2489.02,2637.02,2793.83,2959.96,3135.96,3322.44,3520.00,3729.31,3951.07,4186.01,4434.92,4698.64,4978.03,5274.04,5587.65,5919.91,6271.93,6644.88,7040.00,7458.62,7902.13,8372.02,8869.84,9397.27,9956.06,10548.08,11175.30,11839.82,12543.85};
---
> MIDI::MIDI(Coil *parent): coil(parent) {
45,47d42
< // Buffer data coming in through hardware MIDI
< unsigned char hwMIDIbuf[3], hwMIDIbufInd = 0;
< 
50a46,47
> }
> 
343,358d339
< #ifdef PRINTMIDI
<   SerialUSB.print("MIDI: ");
<   SerialUSB.print(byte1, HEX);
<   SerialUSB.print(" ");
<   SerialUSB.print(byte2, HEX);
<   SerialUSB.print(" ");
<   SerialUSB.println(byte3, HEX);
< #endif
< 
<   // Pass MIDI though to hardware port
<   if(Serial.availableForWrite() >= 3) { // Rush E protection
<     Serial.write(byte1);
<     Serial.write(byte2);
<     Serial.write(byte3);
<   }
< 
361,365d341
<   if(offsetChannel < CHANNEL_CLEAN || offsetChannel >= CHANNEL_INVALID) {
<     LCD::MIDIping(-1);
<     return;
<   }
<   LCD::MIDIping(channel);
389,413d364
<   }
< }
< 
< void initMIDI() {
< #ifdef PRINTMIDI
<   SerialUSB.begin(115200);
< #endif
< 
<   // Physical MIDI interface
<   Serial.begin(31250);
< }
< 
< void processMIDI() {
<   static midiEventPacket_t rx;
<   rx = MidiUSB.read();
<   if(rx.header) handleMIDI(rx.byte1, rx.byte2, rx.byte3);
<   
<   while(Serial.available()) {
<     unsigned char d = Serial.read();
<     if(d & 0x80) hwMIDIbufInd = 0;
<     hwMIDIbuf[hwMIDIbufInd++] = d;
<     if(hwMIDIbufInd >= 3) {
<       hwMIDIbufInd = 0;
<       handleMIDI(hwMIDIbuf[0], hwMIDIbuf[1], hwMIDIbuf[2]);
<     }
416,442d366
< 
< void checkConnected() {
<   static uint16_t lastFrameNumber;
<   static int8_t missedFrameCount = -1;
< 
<   // Should increment at 1ms USB frame interval
<   const uint16_t frameNumber = (UOTGHS->UOTGHS_DEVFNUM & UOTGHS_DEVFNUM_FNUM_Msk) >> UOTGHS_DEVFNUM_FNUM_Pos;
< 
<   if(frameNumber == lastFrameNumber) {
<     // Only count missed frames if we have received some in the past
<     if(missedFrameCount >= 0)
<       missedFrameCount++;
<   }
< 
<   else missedFrameCount = 0;
< 
<   lastFrameNumber = frameNumber;
< 
<   // Disable oscillators if we go more than 10ms without a USB frame
<   if(missedFrameCount >= 10) {
<     missedFrameCount = -1;
<     for(unsigned int x=0; x<NVOICES; x++)
<         Voice::voices[x].active = false;
<   }
< }
< 
< }
