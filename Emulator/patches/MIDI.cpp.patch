4d3
< #include "LCD.h"
6d4
< #include <Arduino.h>
8c6
< #include <MIDIUSB.h>
---
> #include <string.h>
10c8
< namespace MIDI {
---
> #include "Coil.h"
11a10,11
> MIDI::MIDI(Coil *parent): coil(parent) {
> 
43,45d42
< // Buffer data coming in through hardware MIDI
< unsigned char hwMIDIbuf[3], hwMIDIbufInd = 0;
< 
48a46,47
> }
> 
339,354d337
< #ifdef PRINTMIDI
<   SerialUSB.print("MIDI: ");
<   SerialUSB.print(byte1, HEX);
<   SerialUSB.print(" ");
<   SerialUSB.print(byte2, HEX);
<   SerialUSB.print(" ");
<   SerialUSB.println(byte3, HEX);
< #endif
< 
<   // Pass MIDI though to hardware port
<   if(Serial.availableForWrite() >= 3) { // Rush E protection
<     Serial.write(byte1);
<     Serial.write(byte2);
<     Serial.write(byte3);
<   }
< 
357,361d339
<   if(offsetChannel < CHANNEL_CLEAN || offsetChannel >= CHANNEL_INVALID) {
<     LCD::MIDIping(-1);
<     return;
<   }
<   LCD::MIDIping(channel);
385,409d362
<   }
< }
< 
< void initMIDI() {
< #ifdef PRINTMIDI
<   SerialUSB.begin(115200);
< #endif
< 
<   // Physical MIDI interface
<   Serial.begin(31250);
< }
< 
< void processMIDI() {
<   static midiEventPacket_t rx;
<   rx = MidiUSB.read();
<   if(rx.header) handleMIDI(rx.byte1, rx.byte2, rx.byte3);
<   
<   while(Serial.available()) {
<     unsigned char d = Serial.read();
<     if(d & 0x80) hwMIDIbufInd = 0;
<     hwMIDIbuf[hwMIDIbufInd++] = d;
<     if(hwMIDIbufInd >= 3) {
<       hwMIDIbufInd = 0;
<       handleMIDI(hwMIDIbuf[0], hwMIDIbuf[1], hwMIDIbuf[2]);
<     }
412,438d364
< 
< void checkConnected() {
<   static uint16_t lastFrameNumber;
<   static int8_t missedFrameCount = -1;
< 
<   // Should increment at 1ms USB frame interval
<   const uint16_t frameNumber = (UOTGHS->UOTGHS_DEVFNUM & UOTGHS_DEVFNUM_FNUM_Msk) >> UOTGHS_DEVFNUM_FNUM_Pos;
< 
<   if(frameNumber == lastFrameNumber) {
<     // Only count missed frames if we have received some in the past
<     if(missedFrameCount >= 0)
<       missedFrameCount++;
<   }
< 
<   else missedFrameCount = 0;
< 
<   lastFrameNumber = frameNumber;
< 
<   // Disable oscillators if we go more than 10ms without a USB frame
<   if(missedFrameCount >= 10) {
<     missedFrameCount = -1;
<     for(int x=0; x<NVOICES; x++)
<         Voice::voices[x].active = false;
<   }
< }
< 
< }
