--- ../Tesla_Coil_MIDI_Synth/MIDI.cpp	2024-11-11 18:33:19
+++ build/patched/MIDI.cpp	2024-11-11 18:43:39
@@ -1,13 +1,12 @@
+#include "Coil.h"
 #include "MIDI.h"
 #include "Synth.h"
 #include "Voice.h"
 #include "LCD.h"
 
-#include <Arduino.h>
 #include <limits.h>
-#include <MIDIUSB.h>
 
-MIDI::MIDI(Voices &voices, Synth &synth, LCD &lcd): voices(voices), synth(synth), lcd(lcd) {}
+MIDI::MIDI(Coil &coil, Voices &voices, Synth &synth, LCD &lcd): coil(coil), voices(voices), synth(synth), lcd(lcd) {}
 
 const float MIDI::midi2freq[] = {8.18,8.66,9.18,9.72,10.30,10.91,11.56,12.25,12.98,13.75,14.57,15.43,16.35,17.32,18.35,19.45,20.60,21.83,23.12,24.50,25.96,27.50,29.14,30.87,32.70,34.65,36.71,38.89,41.20,43.65,46.25,49.00,51.91,55.00,58.27,61.74,65.41,69.30,73.42,77.78,82.41,87.31,92.50,98.00,103.83,110.00,116.54,123.47,130.81,138.59,146.83,155.56,164.81,174.61,185.00,196.00,207.65,220.00,233.08,246.94,261.63,277.18,293.66,311.13,329.63,349.23,369.99,392.00,415.30,440.00,466.16,493.88,523.25,554.37,587.33,622.25,659.26,698.46,739.99,783.99,830.61,880.00,932.33,987.77,1046.50,1108.73,1174.66,1244.51,1318.51,1396.91,1479.98,1567.98,1661.22,1760.00,1864.66,1975.53,2093.00,2217.46,2349.32,2489.02,2637.02,2793.83,2959.96,3135.96,3322.44,3520.00,3729.31,3951.07,4186.01,4434.92,4698.64,4978.03,5274.04,5587.65,5919.91,6271.93,6644.88,7040.00,7458.62,7902.13,8372.02,8869.84,9397.27,9956.06,10548.08,11175.30,11839.82,12543.85};
 
@@ -17,7 +16,7 @@
   // Reject notes we shouldn't play
   if(note < minNote || note > maxNote) return;
 
-  unsigned long ms = millis();
+  unsigned long ms = coil.millis();
 
   const Drum::Drum *drum = NULL;
   if(channel == CHANNEL_DRUM) {
@@ -167,7 +166,7 @@
     auto &voice = voices[x];
     if(voice.midiChannel == channel) {
       if(channel == CHANNEL_ARP) {
-        unsigned long ms = millis();
+        unsigned long ms = coil.millis();
         for(int y=0; y<MAX_ARP_NOTES; y++)
           if(voice.arpNotes[y] == note && voice.arpNoteEndTimestamps[y] > ms) {
             voice.arpNoteEndTimestamps[y] = ms+ARPEGGIO_LINGER;
@@ -191,7 +190,7 @@
     if(voice.midiChannel == channel) {
       bool thisVoice = ((voice.midiNote == note) || (note == 0xFF));
       if(!thisVoice && voice.midiChannel == CHANNEL_ARP) { // Check if this command is for one of the arp notes
-        unsigned long ms = millis();
+        unsigned long ms = coil.millis();
         for(int y=0; y<MAX_ARP_NOTES; y++)
           if(voice.arpNoteEndTimestamps[y] > ms && voice.arpNotes[y] == note) {
             thisVoice = true;
@@ -311,14 +310,6 @@
   SerialUSB.println(byte3, HEX);
 #endif
 
-  // Pass MIDI though to hardware port
-  if(Serial.availableForWrite() >= 3) { // Rush E protection
-    Serial.write(byte1);
-    Serial.write(byte2);
-    if(expectedLength(byte1) > 2)
-      Serial.write(byte3);
-  }
-
   // Ignore MIDI channels that we don't respond to
   int16_t offsetChannel = (int16_t)channel - (int16_t)MIDIbaseChannel;
   if(offsetChannel < CHANNEL_CLEAN || offsetChannel >= CHANNEL_INVALID) {
@@ -360,34 +351,8 @@
 #ifdef PRINTMIDI
   SerialUSB.begin(115200);
 #endif
-
-  // Physical MIDI interface
-  Serial.begin(31250);
 }
 
-void MIDI::process() {
-  static midiEventPacket_t rx;
-  rx = MidiUSB.read();
-  if(rx.header) handleMIDI(rx.byte1, rx.byte2, rx.byte3);
-  
-  while(Serial.available()) {
-    unsigned char d = Serial.read();
-    
-    if(d & 0x80) hwMIDIbufInd = 0;
-    hwMIDIbuf[hwMIDIbufInd++] = d;
-    
-    if(hwMIDIbufInd >= expectedLength(hwMIDIbuf[0])) {
-      hwMIDIbufInd = 0;
-
-      // Make sure the first byte is a valid command byte
-      if(hwMIDIbuf[0] & 0x80) {
-        handleMIDI(hwMIDIbuf[0], hwMIDIbuf[1], hwMIDIbuf[2]);
-        MidiUSB.sendMIDI({(uint8_t)(hwMIDIbuf[0] >> 4), hwMIDIbuf[0], hwMIDIbuf[1], hwMIDIbuf[2]});
-      }
-    }
-  }
-}
-
 // Expected length of a MIDI message based on the first byte
 uint8_t MIDI::expectedLength(uint8_t command) {
   static const uint8_t midiLengths[8] = {3, 3, 3, 3, 2, 2, 3, 3};
