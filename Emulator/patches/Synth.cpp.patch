5d4
< #include <Arduino.h>
6a6,7
> #include <math.h>
> #include <string.h>
8c9
< namespace Synth {
---
> #include "Coil.h"
9a11,14
> #define PI M_PI
> 
> Synth::Synth(Coil *parent): coil(parent) {
> 
12a18,20
> initSynth();
> }
> 
16,18d23
< void updateWidth(uint8_t chan, uint32_t pulseWidth);
< void updatePeriod(uint8_t chan, uint32_t period);
< 
213,215d217
< 
<   // Reset WDT
<   WDT->WDT_CR = WDT_CR_KEY(0xA5) | WDT_CR_WDRSTT;
217,271d218
< 
< // Update pulse width of a timer
< inline __attribute__((always_inline)) void updateWidth(uint8_t chan, uint32_t pulseWidth) {
<   const Voice::VoiceConfig &vc = Voice::voiceConfigs[chan];
<   if(vc.timerab) {
<     // If we decrease the compare value below the counter value, it will never equal it to set the pin low
<     //   and the pin will stay high for an entire period (bad).
<     // Include some margin since counter will keep going as the code runs
<     if(vc.channel->TC_RB > vc.channel->TC_CV && pulseWidth < vc.channel->TC_CV+10) {
<       uint32_t temp = vc.channel->TC_CV; // save count value
<       vc.channel->TC_CCR = TC_CCR_SWTRG; // trigger the timer to reset it back to 0 and set pin low
<       vc.channel->TC_CV = temp; // put counter value back
<     }
<     vc.channel->TC_RB = pulseWidth; // update pulse width
<     if(pulseWidth < MIN_WIDTH) {
<       vc.channel->TC_CMR &= ~TC_CMR_BCPC_SET; // disable output if pulse width is too small
<       vc.channel->TC_CCR = TC_CCR_SWTRG; // re-trigger the timer
<     } else vc.channel->TC_CMR |= TC_CMR_BCPC_SET;
<   } else {
<     if(vc.channel->TC_RA > vc.channel->TC_CV && pulseWidth < vc.channel->TC_CV+10) {
<       uint32_t temp = vc.channel->TC_CV;
<       vc.channel->TC_CCR = TC_CCR_SWTRG;
<       vc.channel->TC_CV = temp;
<     }
<     vc.channel->TC_RA = pulseWidth;
<     if(pulseWidth < MIN_WIDTH) {
<       vc.channel->TC_CMR &= ~TC_CMR_ACPC_SET;
<       vc.channel->TC_CCR = TC_CCR_SWTRG;
<     } else vc.channel->TC_CMR |= TC_CMR_ACPC_SET;
<   }
< }
< 
< // Update frequency of a timer
< inline __attribute__((always_inline)) void updatePeriod(uint8_t chan, uint32_t period) {
<   const Voice::VoiceConfig &vc = Voice::voiceConfigs[chan];
<   vc.channel->TC_RC = period;
<   if(vc.channel->TC_CV > period) { // Reset so counter stays below the period (otherwise would get long pulses)
<     if(vc.timerab) {
<       // Temporarily make software trigger set the pin instead of reset in order to behave the same as an RC compare
<       if(vc.channel->TC_CMR & TC_CMR_BCPC_SET) { // Only do this if the output is enabled
<         vc.channel->TC_CMR = (vc.channel->TC_CMR & ~(0b11<<TC_CMR_BSWTRG_Pos)) | TC_CMR_BSWTRG_SET;
<         vc.channel->TC_CCR = TC_CCR_SWTRG;
<         vc.channel->TC_CMR = (vc.channel->TC_CMR & ~(0b11<<TC_CMR_BSWTRG_Pos)) | TC_CMR_BSWTRG_CLEAR;
<       }
<     } else {
<       if(vc.channel->TC_CMR & TC_CMR_ACPC_SET) {
<         vc.channel->TC_CMR = (vc.channel->TC_CMR & ~(0b11<<TC_CMR_ASWTRG_Pos)) | TC_CMR_ASWTRG_SET;
<         vc.channel->TC_CCR = TC_CCR_SWTRG;
<         vc.channel->TC_CMR = (vc.channel->TC_CMR & ~(0b11<<TC_CMR_ASWTRG_Pos)) | TC_CMR_ASWTRG_CLEAR;
<       }
<     }
<   }
< }
< 
< }
