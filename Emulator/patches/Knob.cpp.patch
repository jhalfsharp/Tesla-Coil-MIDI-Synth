--- ../Tesla_Coil_MIDI_Synth/Knob.cpp	2024-11-09 18:51:12
+++ build/patched/Knob.cpp	2024-11-09 19:53:22
@@ -1,13 +1,11 @@
+#include "Coil.h"
 #include "Knob.h"
 #include "Synth.h"
 #include "LCD.h"
 #include "MIDI.h"
 #include "Audio.h"
 
-#include <Arduino.h>
-
 // Encoder tracking and acceleration
-int8_t Knob::movement = 0;
 int32_t Knob::recentMovement = 0;
 unsigned long Knob::lastDecrement = 0;
 
@@ -19,21 +17,15 @@
 // (class is for sematic purposes only; instantiating multiple is pointless)
 Knob *Knob::knob;
 
-Knob::Knob(Synth &synth, LCD &lcd, MIDI &midi, Audio &audio): synth(synth), lcd(lcd), midi(midi), audio(audio) {
+Knob::Knob(Coil &coil, Synth &synth, LCD &lcd, MIDI &midi, Audio &audio): coil(coil), synth(synth), lcd(lcd), midi(midi), audio(audio) {
   knob = this;
 }
 
 void Knob::pollButton() {
-  unsigned long ms = millis();
-  bool buttonState = digitalRead(22);
-  if(!buttonState) {
-    if(lastButtonState && ms - lastButton >= BUTTON_DEBOUNCE) lcd.editing = !lcd.editing;
-    lastButton = ms;
-  }
 }
 
 void Knob::updateEncoder() {
-  unsigned long ms = millis();
+  unsigned long ms = coil.millis();
   while(ms - lastDecrement > ENCODER_ACCELERATION) {
     lastDecrement += ENCODER_ACCELERATION;
     if(recentMovement > 0) recentMovement--;
@@ -43,13 +35,8 @@
 
 // Called when encoder moves
 void Knob::enc() {
-  Knob &k = *knob;
+  Knob &k = *this;
   
-  encLutInd |= (!digitalRead(64))<<1 | !digitalRead(65); // Add current state to index
-  movement += encLut[encLutInd]; // Increment position
-  if(encLut[encLutInd]) encDir = (encLut[encLutInd] > 0) ? 1:0; // Update instantaneous direction
-  encLutInd = ((encLutInd<<2)&0b1100) | (encDir<<4); // Shift bits and stuff for next iteration
-  
   if(abs(movement) >= 4) { // Four pulses per tick
     recentMovement += movement/4;
     movement = 0;
@@ -115,11 +102,3 @@
   updateEncoder();
   pollButton();
 }
-
-void Knob::init() {
-  pinMode(22, INPUT_PULLUP);
-  pinMode(64, INPUT_PULLUP);
-  pinMode(65, INPUT_PULLUP);
-  attachInterrupt(64, enc, CHANGE);
-  attachInterrupt(65, enc, CHANGE);
-}
